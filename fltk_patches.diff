--- a/FL/Fl_Device.H
+++ b/FL/Fl_Device.H
@@ -33,6 +33,11 @@
 #include <FL/Fl_RGB_Image.H>
 #include <stdlib.h>
 
+#ifdef __GNUC__
+# pragma GCC diagnostic push
+# pragma GCC diagnostic ignored "-Wunused-parameter"
+#endif
+
 class Fl_Graphics_Driver;
 class Fl_Font_Descriptor;
 /** \brief Points to the driver that currently receives all graphics requests */
@@ -629,6 +634,10 @@ public:
   Fl_RGB_Image* rectangle_capture(Fl_Widget *widget, int x, int y, int w, int h) {return NULL;}
 };
 
+#ifdef __GNUC__
+# pragma GCC diagnostic pop
+#endif
+
 #endif // Fl_Device_H
 
 //
--- a/FL/Fl_Help_Dialog.H
+++ b/FL/Fl_Help_Dialog.H
@@ -28,6 +28,7 @@
 #ifndef Fl_Help_Dialog_H
 #define Fl_Help_Dialog_H
 #include <FL/Fl.H>
+#include <FL/fl_ask.H>
 #include <FL/Fl_Double_Window.H>
 #include <FL/Fl_Group.H>
 #include <FL/Fl_Button.H>
@@ -63,6 +64,8 @@ private:
   Fl_Help_View *view_;
   inline void cb_view__i(Fl_Help_View*, void*);
   static void cb_view_(Fl_Help_View*, void*);
+  Fl_Button *close_;
+  static void cb_close_(Fl_Button*, void*);
 public:
   ~Fl_Help_Dialog();
   int h();
@@ -82,6 +85,10 @@ public:
   int w();
   int x();
   int y();
+  void border(int b) { window_->border(b); }
+  void always_on_top() { fl_always_on_top(window_); }
+  void size_range(int w, int h, int xw, int xh) { window_->size_range(w, h, xw, xh); }
+  void resizable(Fl_Widget *o) { window_->resizable(o); }
 };
 #endif
 
--- a/FL/fl_ask.H
+++ b/FL/fl_ask.H
@@ -26,6 +26,7 @@
 #  include "Enumerations.H"
 
 class Fl_Widget;
+class Fl_Window;
 
 /** Different system beeps available. 
  \sa fl_beep(int) */
@@ -69,6 +70,8 @@ FL_EXPORT int fl_message_hotspot(void);
 FL_EXPORT void fl_message_title(const char *title);
 FL_EXPORT void fl_message_title_default(const char *title);
 
+FL_EXPORT void fl_always_on_top(Fl_Window *o);
+
 // pointers you can use to change FLTK to a foreign language:
 extern FL_EXPORT const char* fl_no;
 extern FL_EXPORT const char* fl_yes;
--- a/src/Fl_Choice.cxx
+++ b/src/Fl_Choice.cxx
@@ -186,13 +186,13 @@ int Fl_Choice::handle(int e) {
   J1:
     if (Fl::scheme()
 	|| fl_contrast(textcolor(), FL_BACKGROUND2_COLOR) != textcolor()) {
-      v = menu()->pulldown(x(), y(), w(), h(), mvalue(), this);
+      v = menu()->pulldown(x(), y(), w(), h(), 0, this);
     } else {
       // In order to preserve the old look-n-feel of "white" menus,
       // temporarily override the color() of this widget...
       Fl_Color c = color();
       color(FL_BACKGROUND2_COLOR);
-      v = menu()->pulldown(x(), y(), w(), h(), mvalue(), this);
+      v = menu()->pulldown(x(), y(), w(), h(), 0, this);
       color(c);
     }
     if (!v || v->submenu()) return 1;
--- a/src/Fl_Color_Chooser.cxx
+++ b/src/Fl_Color_Chooser.cxx
@@ -92,11 +92,11 @@ enum {
   M_HSV		/**< mode() of Fl_Color_Chooser showing HSV values */
 };
 static const Fl_Menu_Item mode_menu[] = {
-  {"rgb"},
-  {"byte"},
-  {"hex"},
-  {"hsv"},
-  {0}
+  { "rgb",  0,0,0,0, FL_NORMAL_LABEL, 0, 12, 0 },
+  { "byte", 0,0,0,0, FL_NORMAL_LABEL, 0, 12, 0 },
+  { "hex",  0,0,0,0, FL_NORMAL_LABEL, 0, 12, 0 },
+  { "hsv",  0,0,0,0, FL_NORMAL_LABEL, 0, 12, 0 },
+  { 0,0,0,0,0,0,0,0,0 }
 };
 
 #ifndef FL_DOXYGEN
--- a/src/Fl_Help_Dialog.cxx
+++ b/src/Fl_Help_Dialog.cxx
@@ -144,6 +144,10 @@ void Fl_Help_Dialog::cb_view_(Fl_Help_View* o, void* v) {
   ((Fl_Help_Dialog*)(o->parent()->user_data()))->cb_view__i(o,v);
 }
 
+void Fl_Help_Dialog::cb_close_(Fl_Button* o, void* v) {
+  ((Fl_Help_Dialog*)(o->parent()->parent()->user_data()))->hide();
+}
+
 Fl_Help_Dialog::Fl_Help_Dialog() {
   { window_ = new Fl_Double_Window(530, 385, "Help Dialog");
     window_->user_data((void*)(this));
@@ -172,10 +176,10 @@ Fl_Help_Dialog::Fl_Help_Dialog() {
         larger_->labelsize(16);
         larger_->callback((Fl_Callback*)cb_larger_);
       } // Fl_Button* larger_
-      { Fl_Group* o = new Fl_Group(350, 10, 171, 25);
+      { Fl_Group* o = new Fl_Group(350, 10, 141, 25);
         o->box(FL_DOWN_BOX);
         o->color(FL_BACKGROUND2_COLOR);
-        { find_ = new Fl_Input(375, 12, 143, 21, "@search");
+        { find_ = new Fl_Input(375, 12, 113, 21, "@search");
           find_->tooltip("find text in document");
           find_->box(FL_FLAT_BOX);
           find_->labelsize(13);
@@ -185,6 +189,12 @@ Fl_Help_Dialog::Fl_Help_Dialog() {
         } // Fl_Input* find_
         o->end();
       } // Fl_Group* o
+      { close_ = new Fl_Button(495, 10, 25, 25, "X");
+        close_->tooltip("Close the window.");
+        close_->labelfont(1);
+        close_->labelsize(16);
+        close_->callback((Fl_Callback*)cb_close_);
+      } // Fl_Button* close_
       { Fl_Box* o = new Fl_Box(150, 10, 190, 25);
         Fl_Group::current()->resizable(o);
       } // Fl_Box* o
--- a/src/fl_ask.cxx
+++ b/src/fl_ask.cxx
@@ -613,6 +613,24 @@ void fl_message_title_default(const char *title) {
     message_title_default = strdup(title);
 }
 
+void fl_always_on_top(Fl_Window *o) {
+#if !defined(__APPLE__) && !defined(WIN32)
+  XEvent e;
+  e.xclient.type = ClientMessage;
+  e.xclient.window = fl_xid(o);
+  e.xclient.message_type = XInternAtom(fl_display, "_NET_WM_STATE", False);
+  e.xclient.format = 32;
+  e.xclient.data.l[0] = 1;
+  e.xclient.data.l[1] = (long) XInternAtom(fl_display, "_NET_WM_STATE_ABOVE", False);
+  e.xclient.data.l[2] = 0;
+  e.xclient.data.l[3] = 0;
+  e.xclient.data.l[4] = 0;
+  XSendEvent(fl_display, RootWindow(fl_display, fl_screen), False,
+             SubstructureRedirectMask|SubstructureNotifyMask, &e);
+  XFlush(fl_display);
+#endif
+}
+
 /** @} */
 
 //
